{"version":3,"sources":["logo.svg","SortingAlgorithm/mergeSort.js","SortingAlgorithm/bubbleSort.js","SortingAlgorithm/bogoSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithm/insertionsSort.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getBubbleSortAlgorithm","n","swapped","swap","firstIdx","secondIdx","tmp","isSorted","SortingVisualizer","_React$Component","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","_inherits","_createClass","key","value","resetArray","randomIntFromInterval","setState","Merge","_loop","arrayBars","document","getElementsByClassName","_animations$i","_slicedToArray","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","_animations$i2","newHeight","height","concat","Insertion","_loop2","_animations$i3","_animations$i4","Bubble","_loop3","_animations$i5","_animations$i6","random","Bogo","_loop4","_animations$i7","_animations$i8","javaScriptSortedArray","sort","a","b","bubbleSortedArray","console","log","arrayAreEqual","_this2","React","createElement","className","map","idx","onClick","mergeSort","insertionSort","bubbleSort","bogoSort","testSortingAlgorithm","Component","min","max","arrayOne","arrayTwo","App","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7991a33c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index i in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index j in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n\r\n        }\r\n    }\r\n\r\n    while (i <= middleIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, i]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, i]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n\r\n    while (j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([j, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([j, j]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}","export function getBubbleSortAlgorithm(array) {\r\n    const animations = [];\r\n    let n = array.length;\r\n    let swapped = false;\r\n    do {\r\n        swapped = false;\r\n        for (let i = 0; i < n - 1; i++) {\r\n            if (array[i] > array[i + 1]) {\r\n                animations.push([i, i + 1]);\r\n                animations.push([i, i + 1]);\r\n                swap(array, i, i + 1, animations);\r\n                swapped = true;\r\n            }\r\n        }\r\n        n = n - 1\r\n    } while (swapped);\r\n\r\n    return animations\r\n}\r\n\r\nfunction swap(array, firstIdx, secondIdx, animations) {\r\n    animations.push([firstIdx, array[secondIdx]]);\r\n    animations.push([firstIdx, secondIdx]);\r\n    animations.push([firstIdx, secondIdx]);\r\n    animations.push([secondIdx, array[firstIdx]]);\r\n    let tmp = array[firstIdx];\r\n    array[firstIdx] = array[secondIdx];\r\n    array[secondIdx] = tmp;\r\n}\r\n\r\n// 3, 5, 1, 8, 3, 6","export function getBogoSortAlgorithm(array) {\r\n    const animations = [];\r\n    while (!isSorted(array)) {\r\n        var a = Math.floor(Math.random() * array.length);\r\n        var b = Math.floor(Math.random() * array.length);\r\n        swap(array, a, b, animations)\r\n    }\r\n}\r\n\r\n\r\nfunction swap(array, firstIdx, secondIdx, animations) {\r\n    animations.push([firstIdx, array[secondIdx]]);\r\n    animations.push([firstIdx, secondIdx]);\r\n    animations.push([firstIdx, secondIdx]);\r\n    animations.push([secondIdx, array[firstIdx]]);\r\n    let tmp = array[firstIdx];\r\n    array[firstIdx] = array[secondIdx];\r\n    array[secondIdx] = tmp;\r\n}\r\n\r\nfunction isSorted(array){\r\n    for (var i = 0; i < array.length - 1; i++){\r\n        if (array[i] > array[i + 1]) return false;\r\n    }\r\n    return true\r\n}","import React from \"react\";\r\nimport './SortingVisualizer.css';\r\nimport * as Merge from '../SortingAlgorithm/mergeSort.js';\r\nimport * as Insertion from '../SortingAlgorithm/insertionsSort.js'\r\nimport * as Bubble from '../SortingAlgorithm/bubbleSort.js'\r\nimport * as Bogo from '../SortingAlgorithm/bogoSort.js'\r\n\r\n// Change this value for the speed fo the animations\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n\r\n// Change this value for the numver of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 435;\r\n\r\n\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++){\r\n            array.push(randomIntFromInterval(5, 730));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    mergeSort() {\r\n        // this.state for change on the site in realtime\r\n        const animations = Merge.getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? 'red' : 'turquoise';\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);           \r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    insertionSort() {\r\n        const animations = Insertion.getInsertionSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isCololorChange = i % 3 !== 2;\r\n            if (isCololorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? 'red' : 'turquoise';\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);           \r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = Bubble.getBubbleSortAlgorithm(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? 'red' : 'turquoise';\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);           \r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    bogoSort() {\r\n        const animations = Bogo.getBogoSortAlgorithm(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? 'red' : 'turquoise';\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);           \r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    testSortingAlgorithm() {\r\n        for (let i = 0; i < 100; i++) {\r\n            const array = [];\r\n            const length = randomIntFromInterval(1, 1000);\r\n            for (let i = 0; i < length; i ++){\r\n                array.push(randomIntFromInterval(-1000, 1000));\r\n            }\r\n            const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n            const bubbleSortedArray = Bubble.getBubbleSortAlgorithm(array.slice());\r\n            // const mergeSortedArray = Merge.getMergeSortAnimations(array.slice());\r\n            // console.log(javaScriptSortedArray)\r\n            console.log(bubbleSortedArray)\r\n            console.log(arrayAreEqual(javaScriptSortedArray, bubbleSortedArray));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        return(\r\n            <div className=\"array-container\">\r\n                {array.map((value, idx) => (\r\n                    <div \r\n                        className=\"array-bar\" \r\n                        key={idx}\r\n                        style={{height: `${value}px`}}\r\n                    > </div>\r\n                ))}\r\n                <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                <button onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n                <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                <button onClick={() => this.bogoSort()}>Bogo Sort</button>\r\n                <button onClick={() => this.testSortingAlgorithm()}>Test Sorting Algorithm</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction randomIntFromInterval(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\n\r\nfunction arrayAreEqual(arrayOne, arrayTwo) {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n        if (arrayOne[i] !== arrayTwo[i]) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n","export function getInsertionSortAnimations(array) {\r\n    const animations = []\r\n    let value = 0;\r\n    let j = 0;\r\n\r\n    for (let i = 1; i < array.length; i++) {\r\n\r\n        value = array[i];\r\n        j = i;\r\n        \r\n        while (j > 0 && array[j - 1] > value) {\r\n            animations.push([j, j - 1]);\r\n            animations.push([j, j - 1]);\r\n            animations.push([j, array[j - 1]]);\r\n            array[j] = array[j - 1];\r\n            j = j - 1;\r\n        }\r\n        array[j] = value;\r\n        animations.push([j, j])\r\n        animations.push([j, j])\r\n        animations.push([j, value])\r\n    }\r\n\r\n    return animations;\r\n}\r\n","import logo from './logo.svg';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\nimport React, { Component }  from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}